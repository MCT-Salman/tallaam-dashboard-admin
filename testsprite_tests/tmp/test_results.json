[
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "be155597-6c30-4645-898d-2ed4e9b641d0",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC001-User Registration with Valid Phone Number and Correct OTP",
    "description": "Verify user can register successfully using a valid phone number and correct OTP, then set password and provide personal info including avatar.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Navigate through introduction cards to proceed to registration.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Look for any clickable elements or navigation options to access registration or introduction cards.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The app main page is empty with no interactive elements or introduction cards visible. Registration flow cannot be tested further. Reporting this issue and stopping the task.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/node_modules/.vite/deps/react-dom_client.js?v=6fdb22b4:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/App.jsx:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366096004244//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.390Z",
    "modified": "2025-09-20T11:01:36.126Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "8a59100c-07de-4d05-a436-a3b5f709c24f",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC002-User Registration with Invalid Phone Number",
    "description": "Verify registration prevents proceeding when an invalid phone number is entered.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed due to unknown expected result.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:5174/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366149397638//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.396Z",
    "modified": "2025-09-20T11:02:29.531Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "e7a29cb4-4df5-46cd-9553-a8c6c4016ff0",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC003-OTP Verification with Incorrect Code",
    "description": "Verify that entering incorrect OTP code prevents registration and shows appropriate error message.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find a way to navigate to the registration or login page to begin the registration process.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Click the 'عودة للرئيسية' (Back to Home) button to return to the homepage and try to find registration from there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'إدارة الطلاب' (Student Management) link to check if registration or OTP verification can be started there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Look for a button or link to add/register a new student or start registration process.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[4]/div[2]/div/table/tbody/tr/td[7]/div/button[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Look for a button or link to add/register a new student or start the registration process, possibly by clicking on one of the buttons with no visible text (indexes 24, 25, 26, 27, 28, 29) or by searching for registration-related options.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[4]/div[2]/div/table/tbody/tr/td[7]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: OTP verification did not pass as expected.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The registration and OTP verification flow could not be found or accessed in the application. The test to verify that entering incorrect OTP prevents registration and shows an error message could not be performed. Please provide access or instructions to the correct registration and OTP verification flow for further testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/main.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5174/?token=NDdNim4AxYNC' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:744:0)\n[ERROR] WebSocket connection to 'ws://localhost:5173/?token=NDdNim4AxYNC' failed: Error during WebSocket handshake: Unexpected response code: 400 (at http://localhost:5174/@vite/client:754:0)\n[ERROR] [vite] failed to connect to websocket.\nyour current setup:\n  (browser) localhost:5174/ <--[HTTP]--> localhost:5173/ (server)\n  (browser) localhost:5174/ <--[WebSocket (failing)]--> localhost:5173/ (server)\nCheck out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr . (at http://localhost:5174/@vite/client:764:15)\n[ERROR] 404 Error: User attempted to access non-existent route: /register (at http://localhost:5174/src/pages/NotFound.jsx:9:12)\n[ERROR] 404 Error: User attempted to access non-existent route: /register (at http://localhost:5174/src/pages/NotFound.jsx:9:12)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366335765019//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.403Z",
    "modified": "2025-09-20T11:05:35.910Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "535e45fd-f73e-4f2a-89e7-b51c4d195259",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC004-Login with Correct Phone Number and Password",
    "description": "Verify user can login successfully with correct phone number and password.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or buttons to open the login screen or try scrolling or other ways to reveal login form.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Navigate to the main login page URL to open the login screen.\n        await page.goto('http://localhost:5174', timeout=10000)\n        \n\n        # Try to find any alternative ways to open the login screen, such as searching for login link or button, or try to reload the page or check for errors.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Return to the original application URL and try alternative ways to access the login screen or diagnose the empty page issue.\n        await page.goto('http://localhost:5174', timeout=10000)\n        \n\n        # Assert that the user is logged in by checking the presence of dashboard title indicating main app interface\n        dashboard_title = await page.text_content('h1')\n        assert dashboard_title is not None and 'لوحة تحكم المدير' in dashboard_title, 'User is not redirected to the main app interface after login'\n        # Optionally, check for presence of navigation menu items that appear only after login\n        navigation_items = await page.locator('nav >> text=الرئيسية').count()\n        assert navigation_items > 0, 'Navigation menu not found, user might not be logged in'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366233144184//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.409Z",
    "modified": "2025-09-20T11:03:53.282Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "cec2302a-62f1-4a54-8363-b756303f45ee",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC005-Login with Incorrect Password",
    "description": "Verify error message displays correctly when user attempts login with incorrect password.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: Expected error message on login with incorrect password, but test execution failed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "\nBrowser Console Logs:\n[ERROR] WebSocket connection to 'ws://localhost:5174/?token=NDdNim4AxYNC' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:744:0)\n[ERROR] WebSocket connection to 'ws://localhost:5173/?token=NDdNim4AxYNC' failed: Error during WebSocket handshake: Unexpected response code: 400 (at http://localhost:5174/@vite/client:754:0)\n[ERROR] [vite] failed to connect to websocket.\nyour current setup:\n  (browser) localhost:5174/ <--[HTTP]--> localhost:5173/ (server)\n  (browser) localhost:5174/ <--[WebSocket (failing)]--> localhost:5173/ (server)\nCheck out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr . (at http://localhost:5174/@vite/client:764:15)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366149692602//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.415Z",
    "modified": "2025-09-20T11:02:29.821Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "39e3a51f-d1c0-41aa-9197-3fe510015888",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC006-Prevent Multi-Device Login",
    "description": "Verify that login is blocked if the user tries to login from a second device simultaneously.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down or try to find a way to access the login page or login form.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to find any navigation or login links by scrolling further or searching for login-related text.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test failed: Login on Device 2 should be blocked, but no expected message or behavior was verified.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login form or navigation elements are missing on the main page, preventing the login test from starting. Task cannot be completed as specified.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/pages/NotFound.jsx:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5174/?token=NDdNim4AxYNC' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:744:0)\n[ERROR] WebSocket connection to 'ws://localhost:5173/?token=NDdNim4AxYNC' failed: Error during WebSocket handshake: Unexpected response code: 400 (at http://localhost:5174/@vite/client:754:0)\n[ERROR] [vite] failed to connect to websocket.\nyour current setup:\n  (browser) localhost:5174/ <--[HTTP]--> localhost:5173/ (server)\n  (browser) localhost:5174/ <--[WebSocket (failing)]--> localhost:5173/ (server)\nCheck out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr . (at http://localhost:5174/@vite/client:764:15)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366080943824//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.421Z",
    "modified": "2025-09-20T11:01:21.076Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "325587d7-8921-4b8b-b6bb-63a6d930bb80",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC007-Browse Course Catalog and View Course Details",
    "description": "Verify user can browse the course catalog and view detailed information including demo video, instructor info, pricing, and course contents.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Try to find or reveal login or navigation elements to proceed with login as a student.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to reload the page or open a new tab to find login or course catalog navigation.\n        await page.goto('http://localhost:5174/login', timeout=10000)\n        \n\n        # Input valid phone number and password, then click the login button to authenticate.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('0000000000')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login failed with provided credentials. The page did not navigate away from the login screen and no error message appeared. Further testing cannot continue without successful login. Reporting the issue and stopping the test.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/main.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/components/layout/DashboardLayout.jsx:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366323581715//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.428Z",
    "modified": "2025-09-20T11:05:23.716Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "665460af-ce4d-4274-9756-cdcb3c3843e1",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC008-Purchase Course via External Messenger with Pre-filled Message",
    "description": "Verify purchase course link opens WhatsApp or Telegram with the correct pre-filled message for payment.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down or navigate to find the course purchase link/button to test the purchase flow.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to navigate to another page or section where course purchase link/button might be available.\n        await page.goto('http://localhost:5174/courses', timeout=10000)\n        \n\n        # Try to navigate to homepage or other relevant page to find courses with purchase links/buttons.\n        await page.goto('http://localhost:5174/home', timeout=10000)\n        \n\n        # Click the 'عودة للرئيسية' (Return to Homepage) button to navigate back to the main page and try to find the course purchase link/button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'إدارة الدورات' (Manage Courses) link to navigate to courses management page and find purchase link/button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the purchase or payment related button for the course 'C# للمبتدئين' to test if it opens WhatsApp or Telegram with the correct pre-filled message.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div[2]/div[2]/div[2]/div/div/div/div/div/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: Unable to verify external messenger with pre-filled purchase message.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The purchase link/button for the course does not open WhatsApp or Telegram with the pre-filled message as expected. The issue is reported. Stopping further testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/main.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/pages/admin/AdsManagement.jsx:0:0)\n[ERROR] 404 Error: User attempted to access non-existent route: /home (at http://localhost:5174/src/pages/NotFound.jsx:9:12)\n[ERROR] 404 Error: User attempted to access non-existent route: /home (at http://localhost:5174/src/pages/NotFound.jsx:9:12)\n[WARNING] Collapsible is changing from uncontrolled to controlled. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component. (at http://localhost:5174/node_modules/.vite/deps/chunk-NUJJU5EM.js?v=6fdb22b4:52:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366312748802//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.435Z",
    "modified": "2025-09-20T11:05:12.897Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "cc41973d-e3d9-4973-ba46-87aae94bd8c2",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC009-Activate Course Code and Access Course Content",
    "description": "Verify user can enter a valid purchased course code, activate it successfully, and gain access to course materials and lessons.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or menu elements to reach the course code activation page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Click on 'إدارة الدورات' (Manage Courses) link to access course management section and look for course code activation option.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Look for a button or link related to course code activation or access code entry, possibly under the tabs or in the course options.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the course 'C# للمبتدئين' or its related management button to check if course code activation or access code entry is available there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div[2]/div[2]/div[2]/div/div/div/div/div/div[2]/button[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'الدروس' (Lessons) tab at index 26 to check if course code activation or access code entry is available there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'كوبونات الخصم' (Discount Coupons) link at index 9 to check if course code activation or access code entry is handled there.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[7]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Go back to the main admin menu and check the 'التحقق من الروابط' (Link Verification) section at index 12 for any course code activation or access code entry options.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[10]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Return to the main admin menu and check the 'المزيد' (More) menu at index 6 or 'الإعدادات' (Settings) at index 16 for course code activation or access code entry options.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate back to the main dashboard or course management to find the course code activation page or input form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'إدارة الدورات' (Manage Courses) link at index 4 to navigate to course management section and look for course code activation option.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the course 'C# للمبتدئين' expand button at index 34 to explore if course code activation or access code entry is available in the course details.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div[2]/div[2]/div[2]/div/div/div/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'تفعيل' (Activate) button at index 32 to enter a valid course access code and activate the course.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert that the activation success message is visible on the page\n        success_message = frame.locator('text=تم تفعيل الكود بنجاح')\n        assert await success_message.is_visible(), 'Activation success message should be visible'\n        # Assert that course materials and lessons are accessible after activation\n        course_materials = frame.locator('xpath=//div[contains(@class, \"course-materials\")]')\n        assert await course_materials.is_visible(), 'Course materials should be accessible after activation'\n        lessons = frame.locator('xpath=//div[contains(@class, \"lessons-list\")]')\n        assert await lessons.is_visible(), 'Lessons should be accessible after activation'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366546191756//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.443Z",
    "modified": "2025-09-20T11:09:06.328Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "b4ee7353-858f-4573-9d27-d7729a89bdcf",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC010-Video Playback with DRM Protection and Controls",
    "description": "Verify DRM protected course videos play correctly with available controls and prevent unauthorized screen recording.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: DRM protected course video playback verification failed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:5174/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/175836615575044//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.450Z",
    "modified": "2025-09-20T11:02:35.884Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "d239104a-6ce3-40f7-ac0a-d0e3a0b7995a",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC011-Complete End-of-Unit Quiz and Upload Media Answer",
    "description": "Verify user can complete quizzes at the end of course units and upload media files within allowed duration as part of answers.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down to check if more elements appear or try to find navigation elements to access course content or quizzes.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The main page is empty with no navigation or course content accessible. Cannot proceed with quiz completion or media upload testing as required. Reporting this issue and stopping further actions.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/pages/Login.jsx:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366083817542//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.459Z",
    "modified": "2025-09-20T11:01:23.940Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "5bdb3481-b29f-40e1-bc58-ca8cd4744961",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC012-Apply Valid Coupon Code with Eligibility",
    "description": "Verify that applying a valid coupon code grants discount only if eligibility criteria such as minimum purchased courses are met.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: The test plan execution has failed, so this case is considered failed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:5174/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366171098593//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.466Z",
    "modified": "2025-09-20T11:02:51.249Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "5962d042-302b-4fcd-873a-112b2912ae44",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC013-Reject Coupon Code When Eligibility Not Met",
    "description": "Verify that a coupon code does not apply discount if eligibility criteria are not met and displays appropriate feedback.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down or try to find navigation or elements to access course purchase or coupon application page.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to open a new tab to search for course purchase or coupon application page or try to go to a known URL for course purchase.\n        await page.goto('http://localhost:5174/courses', timeout=10000)\n        \n\n        # Try to navigate to the cart or checkout page where coupon codes can be applied.\n        await page.goto('http://localhost:5174/cart', timeout=10000)\n        \n\n        # Click the 'العودة للرئيسية' button to return to the homepage and try to find alternative navigation to the course purchase or coupon application page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'إنشاء كوبون خصم' button to create a new coupon and test applying it without meeting eligibility criteria.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[5]/div[2]/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'إنشاء كوبون جديد' button to create a new coupon for testing eligibility criteria.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill the coupon creation form with a coupon code, select discount type, set amount, usage limit, description, and valid date range, then create the coupon.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TESTMIN50')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select 'نسبة مئوية' (percentage) as discount type, fill description, start date, and end date, then create the coupon.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[4]/div/div/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'إنشاء الكوبون' button to create the coupon, then navigate to the course purchase or checkout page to test applying the coupon without meeting minimum purchase conditions.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[5]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill the start date and end date fields with valid dates, then click 'إنشاء الكوبون' to create the coupon.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[4]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('2025-09-01')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[4]/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('2025-12-31')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[5]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to the course purchase or checkout page to attempt applying the coupon 'TESTMIN50' without meeting the minimum purchase conditions and verify the system rejects it with appropriate feedback.\n        await page.goto('http://localhost:5174/courses', timeout=10000)\n        \n\n        # Click the 'عرض التفاصيل' button of the course priced at 249 ريال (below the minimum 50 ريال threshold) to view details and attempt to add to cart or apply coupon.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[4]/div[3]/div[3]/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Coupon code applied despite not meeting eligibility criteria.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to the inability to access course details or purchase options. The 'عرض التفاصيل' button is non-functional, preventing further coupon application testing. Please fix this issue to proceed with testing coupon eligibility and feedback.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5174/?token=NDdNim4AxYNC' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:744:0)\n[ERROR] WebSocket connection to 'ws://localhost:5173/?token=NDdNim4AxYNC' failed: Error during WebSocket handshake: Unexpected response code: 400 (at http://localhost:5174/@vite/client:754:0)\n[ERROR] [vite] failed to connect to websocket.\nyour current setup:\n  (browser) localhost:5174/ <--[HTTP]--> localhost:5173/ (server)\n  (browser) localhost:5174/ <--[WebSocket (failing)]--> localhost:5173/ (server)\nCheck out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr . (at http://localhost:5174/@vite/client:764:15)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/components/ui/switch.jsx:0:0)\n[ERROR] 404 Error: User attempted to access non-existent route: /cart (at http://localhost:5174/src/pages/NotFound.jsx:9:12)\n[ERROR] 404 Error: User attempted to access non-existent route: /cart (at http://localhost:5174/src/pages/NotFound.jsx:9:12)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366491772764//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.474Z",
    "modified": "2025-09-20T11:08:11.961Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "bec9b862-de53-4d32-8444-b7475a47ad12",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC014-Edit User Profile Information and Change Password",
    "description": "Verify that users can edit their profile personal information and successfully change their password.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any hidden or scrollable elements or try to refresh or reload the page to find login or navigation elements.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to reload the page to see if the login or navigation elements appear or check for any hidden elements or overlays.\n        await page.goto('http://localhost:5174/', timeout=10000)\n        \n\n        # Try to check if there are any hidden elements or overlays or try to open developer console or debug to find login or navigation elements.\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        # Try to access the login page or profile settings directly by URL if known, or report the issue of the empty page preventing further testing.\n        await page.goto('http://localhost:5174/login', timeout=10000)\n        \n\n        # Input phone number and password, then click the login button to proceed.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('0000000000')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login failed with no feedback or navigation. Cannot proceed with profile editing or password change tests. Reporting this as a critical issue and stopping further testing.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/node_modules/.vite/deps/react.js?v=6fdb22b4:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/App.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/App.jsx:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366271831256//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.499Z",
    "modified": "2025-09-20T11:04:31.959Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "beb1fb09-a3f9-40c5-b696-1f74b3e8b398",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC015-Submit User Suggestion and Verify Admin Receives It",
    "description": "Verify user can submit suggestions or feedback through the app and that admin dashboard receives and displays them.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Locate and navigate to user login page or login form to start user login.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to find login or feedback submission links or buttons by scrolling more or searching for keywords.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The app URL failed to load and resulted in a chrome error page. No interactive elements are available to proceed with the testing of user login or feedback submission. Please verify that the app server is running and the URL is correct, or provide a working URL so I can continue the testing process.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/node_modules/.vite/deps/react-dom_client.js?v=6fdb22b4:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/App.jsx:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5174/?token=NDdNim4AxYNC' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:744:0)\n[ERROR] WebSocket connection to 'ws://localhost:5173/?token=NDdNim4AxYNC' failed: Error during WebSocket handshake: Unexpected response code: 400 (at http://localhost:5174/@vite/client:754:0)\n[ERROR] [vite] failed to connect to websocket.\nyour current setup:\n  (browser) localhost:5174/ <--[HTTP]--> localhost:5173/ (server)\n  (browser) localhost:5174/ <--[WebSocket (failing)]--> localhost:5173/ (server)\nCheck out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr . (at http://localhost:5174/@vite/client:764:15)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366099999657//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.508Z",
    "modified": "2025-09-20T11:01:40.130Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "9d76c7e5-2f65-4f49-8e97-aa5b54cc75b2",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC016-Admin Login and Access Various Management Modules",
    "description": "Verify admin can log in via web dashboard and access modules for course, student, sales, financial, coupon, ads, suggestions, and sub-admin management.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down or try to find login form or elements to input admin credentials.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to find alternative ways to access login or dashboard, such as checking for hidden elements, popups, or navigation links.\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to reload the page to see if the login form appears or check for any console errors that might indicate why the page is empty.\n        await page.goto('http://localhost:5174/', timeout=10000)\n        \n\n        # Check for any console errors or network issues that might explain why the page is empty, or try to access alternative URLs for admin login.\n        await page.goto('http://localhost:5174/admin/login', timeout=10000)\n        \n\n        # Click the 'عودة للرئيسية' (Back to Home) button to return to the main page and try to find alternative login access or navigation options.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Course Management module by clicking the corresponding sidebar link.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Student Management module by clicking the sidebar link with index 5.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Sales Management module by clicking the sidebar link with index 6.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Financial Management module by clicking the sidebar link with index 7.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[5]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Coupon Management module by clicking the sidebar link with index 9.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[7]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Ads Management module by clicking the sidebar link with index 8.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[6]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Suggestions Management module by clicking the sidebar link with index 11.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[9]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to Sub-Admin Management module by clicking the sidebar link with index 10.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[8]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert dashboard and sidebar load correctly by checking platform title and sidebar navigation links\n        assert await frame.locator('text=تعلّم - منصة التعليم الإلكتروني').is_visible()\n        assert await frame.locator('nav >> a').count() >= 8  # At least 8 sidebar links for modules\n          \n        # Assert each module loads and displays relevant data and controls\n        # Course Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[2]').click()\n        assert await frame.locator('text=الدورات').is_visible() or await frame.locator('text=Course').is_visible()\n          \n        # Student Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[3]').click()\n        assert await frame.locator('text=الطلاب').is_visible() or await frame.locator('text=Student').is_visible()\n          \n        # Sales Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[4]').click()\n        assert await frame.locator('text=المبيعات').is_visible() or await frame.locator('text=Sales').is_visible()\n          \n        # Financial Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[5]').click()\n        assert await frame.locator('text=المالية').is_visible() or await frame.locator('text=Financial').is_visible()\n          \n        # Coupon Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[7]').click()\n        assert await frame.locator('text=الكوبونات').is_visible() or await frame.locator('text=Coupon').is_visible()\n          \n        # Ads Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[6]').click()\n        assert await frame.locator('text=الإعلانات').is_visible() or await frame.locator('text=Ads').is_visible()\n          \n        # Suggestions Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[9]').click()\n        assert await frame.locator('text=الاقتراحات').is_visible() or await frame.locator('text=Suggestions').is_visible()\n          \n        # Sub-Admin Management module check\n        await frame.locator('xpath=html/body/div/div[2]/div/nav/a[8]').click()\n        assert await frame.locator('text=إدارة المدراء الفرعيين').is_visible()\n        assert await frame.locator('text=إضافة مدير فرعي').is_visible()\n        assert await frame.locator('text=إجمالي المدراء').is_visible()\n        assert await frame.locator('text=المدراء النشطون').is_visible()\n        assert await frame.locator('text=المدراء المعطلون').is_visible()\n        assert await frame.locator('text=مأمحمد أحمد').is_visible()\n        assert await frame.locator('text=فعفاطمة علي').is_visible()\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366406913094//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.515Z",
    "modified": "2025-09-20T11:06:47.046Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "56dccc3a-dde6-440d-ae4d-cf6232c12033",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC017-Admin Creates and Exports Financial Reports in Excel Format",
    "description": "Verify admin can create financial reports, export them in Excel format complying with standards, and that exported data is accurate.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or menu elements to access the Financial Management module or try scrolling or other means to reveal navigation.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Navigate to the application URL to start fresh and access the Financial Management module.\n        await page.goto('http://localhost:5174', timeout=10000)\n        \n\n        # Try to open a new tab and search for login or admin access page or try to find any direct URL to Financial Management module.\n        await page.goto('http://localhost:5174/login', timeout=10000)\n        \n\n        # Input admin phone number and password, then click the login button to access the admin dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('0000000000')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('adminpassword')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login functionality is broken or unresponsive, preventing access to the Financial Management module. Unable to proceed with testing admin features for creating and exporting financial reports. Task stopped due to this critical issue.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/node_modules/.vite/deps/react.js?v=6fdb22b4:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/App.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/pages/admin/AdminSettings.jsx:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366279553198//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.522Z",
    "modified": "2025-09-20T11:04:39.700Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "c6b69f54-f675-4ae3-bc5f-8d9b1af9d11c",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC018-Admin Verifies YouTube Video Links and Flags Broken URLs",
    "description": "Verify that the system checks the validity of YouTube video links, flags broken or invalid URLs, and disables or alerts admin accordingly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and navigate to the admin or Link Verification module to start the video link verification process.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to find any navigation or menu elements by scrolling further or searching for keywords related to admin or link verification.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Click the 'عودة للرئيسية' (Return to Home) button to go back to the main page and try to find another way to access the Link Verification module or admin features.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/a/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'التحقق من الروابط' (Link Verification) menu item to navigate to the Link Verification module and trigger the video link verification scan.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[10]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Trigger the video link verification scan by clicking the 'فحص جميع الروابط' (Scan All Links) button to verify the system's validation and alert behavior.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Test the system's handling of broken or invalid YouTube links by adding a deliberately broken or invalid YouTube video link to a course, then trigger the verification scan again to confirm the system flags the broken link, disables it, and alerts the admin accordingly.\n        await page.goto('http://localhost:5174/admin/courses', timeout=10000)\n        \n\n        # Click on the course 'C# للمبتدئين' to edit its details and add a broken or invalid YouTube video link to test the system's validation and alert mechanisms.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div[2]/div[2]/div[2]/div/div/div/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the first lesson 'مقدمة في C#' to edit its details and add a broken or invalid YouTube video link for testing the link verification system.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure as per instructions.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to unresponsive lesson editing interface preventing addition of broken YouTube links. The system's link verification module was tested with existing links and scan functionality, but full validation requires fixing this issue.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/main.jsx:0:0)\n[ERROR] 404 Error: User attempted to access non-existent route: /admin (at http://localhost:5174/src/pages/NotFound.jsx:9:12)\n[ERROR] 404 Error: User attempted to access non-existent route: /admin (at http://localhost:5174/src/pages/NotFound.jsx:9:12)\n[WARNING] Collapsible is changing from uncontrolled to controlled. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component. (at http://localhost:5174/node_modules/.vite/deps/chunk-NUJJU5EM.js?v=6fdb22b4:52:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/175836639451569//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.529Z",
    "modified": "2025-09-20T11:06:34.651Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "ab05f5a9-1077-4cd8-aa66-544a36320cdd",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC019-Admin Manages User Suggestions - Mark as Read and Delete",
    "description": "Verify admin can mark user suggestions as read, delete them, and changes reflect dynamically.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any navigation or menu to open Suggestions Management module or reload to find interactive elements.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Select the first unread suggestion to mark it as read.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[4]/div[2]/div/table/tbody/tr/td[7]/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the delete button for the first suggestion in the list to delete it.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[4]/div[2]/div/table/tbody/tr/td[7]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Test stopped due to UI issue: The delete button opens a detailed view popup instead of deleting the suggestion. Cannot verify deletion functionality or dynamic UI updates. Please fix this issue.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/App.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/index.css:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/node_modules/.vite/deps/react-dom_client.js?v=6fdb22b4:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5174/?token=NDdNim4AxYNC' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:744:0)\n[ERROR] WebSocket connection to 'ws://localhost:5173/?token=NDdNim4AxYNC' failed: Error during WebSocket handshake: Unexpected response code: 400 (at http://localhost:5174/@vite/client:754:0)\n[ERROR] [vite] failed to connect to websocket.\nyour current setup:\n  (browser) localhost:5174/ <--[HTTP]--> localhost:5173/ (server)\n  (browser) localhost:5174/ <--[WebSocket (failing)]--> localhost:5173/ (server)\nCheck out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr . (at http://localhost:5174/@vite/client:764:15)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366279410914//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.537Z",
    "modified": "2025-09-20T11:04:39.605Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "c5bf0c12-9da5-4688-a733-ea441272621f",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC020-Validation of User Input Fields Across Registration and Purchase",
    "description": "Verify all user input fields including registration inputs, course codes, and coupon codes have strict validation and provide visual feedback on errors.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Find and navigate to the registration or user input form page to test input validations.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Click on 'إضافة دورة جديدة' (Add New Course) button to open course creation form and test input validations.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'إضافة دورة' (Add Course) button to open the course creation form for input validation testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/main/div/div[3]/div[2]/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to submit the 'Add New Course' form with all fields empty to trigger validation errors and check for visual feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[4]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Test validation for dropdown fields (specialization, subject, teacher) by attempting to submit the form with no selections and check for validation errors. Then test coupon code validation next.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[4]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select a specialization option and then attempt to submit the form without selecting subject and teacher to check validation messages for those fields.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[4]/div/div/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to the coupon code management page and test invalid coupon code input and submission to verify validation and error messages.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/label/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Test coupon code input validation by navigating to the 'كوبونات الخصم' (Coupon Codes) page from the sidebar menu to enter invalid coupon codes and verify validation messages and visual feedback.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div[4]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the 'كوبونات الخصم' (Coupon Codes) link at index 9 to open the coupon code management page for validation testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/nav/a[7]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Validation testing of user input fields was partially successful. The course creation form enforces required fields but only shows generic error messages without specific visual feedback next to each input. Invalid inputs in text fields were accepted without detailed validation errors, except the price field which restricts invalid input but lacks error messages. Coupon code management page is accessible and displays existing coupons, but explicit testing of invalid coupon code input and validation messages was not performed. Registration input validation was not tested due to navigation limitations. Overall, input validation exists but lacks detailed, user-friendly visual feedback and strictness in some fields. Further improvements are recommended for field-specific error messages and comprehensive validation across all user inputs. Task is marked as complete but not fully finished due to incomplete coverage of all input types and validation scenarios.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/main.jsx:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366510427437//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.545Z",
    "modified": "2025-09-20T11:08:30.570Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "59154e82-c946-4f5f-b007-609373614ff1",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC021-User Notification Center Displays Alerts",
    "description": "Verify notification center shows alerts for new courses, course updates, and expiring codes accurately and users can dismiss notifications.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Look for any login or navigation elements by scrolling or refreshing to find access to notification center.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to reload the page to see if the content loads properly or if there is an issue with the page rendering.\n        await page.goto('http://localhost:5174/', timeout=10000)\n        \n\n        # Try to open a new tab and search for login or notification center page or try to find any URL or link that might lead to login or notification center.\n        await page.goto('http://localhost:5174/login', timeout=10000)\n        \n\n        # Input phone number and password, then click the login button to authenticate.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('0000000000')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('password123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[3]/div[2]/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login functionality failure prevents access to notification center. Cannot proceed with notification verification tests. Issue reported.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/node_modules/.vite/deps/react.js?v=6fdb22b4:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/App.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/node_modules/.vite/deps/react-dom_client.js?v=6fdb22b4:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/index.css:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366277021794//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.552Z",
    "modified": "2025-09-20T11:04:37.162Z"
  },
  {
    "projectId": "19cf707d-c1c5-4fae-a5f2-03e0873037b8",
    "testId": "a57cc90c-dd0b-4c53-ac7a-d8ddef764c2d",
    "userId": "64c884b8-30a1-70d5-67e6-2ff3bd437bdc",
    "title": "TC022-User and Admin UI Usability and Responsiveness",
    "description": "Verify all user and admin interfaces meet usability guidelines including clarity of layout, ease of navigation, and responsiveness on target devices.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:5174\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Scroll down or try to find navigation or login elements to access user and admin interfaces.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Try to find any login or navigation links by scrolling up or searching for elements to access user and admin interfaces.\n        await page.mouse.wheel(0, -window.innerHeight)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The main page is empty with no UI components or navigation elements to access user or admin interfaces. Usability verification cannot proceed. Please check the application deployment or provide access to the relevant interfaces.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/src/main.jsx:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@react-refresh:0:0)\n[ERROR] WebSocket connection to 'ws://localhost:5174/?token=NDdNim4AxYNC' failed: Error in connection establishment: net::ERR_EMPTY_RESPONSE (at http://localhost:5174/@vite/client:744:0)\n[ERROR] WebSocket connection to 'ws://localhost:5173/?token=NDdNim4AxYNC' failed: Error during WebSocket handshake: Unexpected response code: 400 (at http://localhost:5174/@vite/client:754:0)\n[ERROR] [vite] failed to connect to websocket.\nyour current setup:\n  (browser) localhost:5174/ <--[HTTP]--> localhost:5173/ (server)\n  (browser) localhost:5174/ <--[WebSocket (failing)]--> localhost:5173/ (server)\nCheck out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr . (at http://localhost:5174/@vite/client:764:15)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/64c884b8-30a1-70d5-67e6-2ff3bd437bdc/1758366080508801//tmp/test_task/result.webm",
    "created": "2025-09-20T11:00:24.559Z",
    "modified": "2025-09-20T11:01:20.633Z"
  }
]
